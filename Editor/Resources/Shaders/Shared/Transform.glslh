#ifndef TRANSFORM_GLSLH
#define TRANSFORM_GLSLH

#ifdef __OMNI_COMPILE_SHADER_FOR_GLSL
	#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#endif // defined __OMNI_COMPILE_SHADER_FOR_GLSL

#ifdef __OMNI_COMPILE_SHADER_FOR_CXX

#include <glm/glm.hpp>
namespace Omni::GLSL {

#endif // defined __OMNI_COMPILE_SHADER_FOR_CXX

struct Transform {

#ifdef __OMNI_COMPILE_SHADER_FOR_CXX
	using vec3 = glm::vec3;
	using f16vec4 = glm::u16vec4;
#endif // defined __OMNI_COMPILE_SHADER_FOR_CXX

	vec3 translation;
	f16vec4 rotation;
	vec3 scale;
};

#ifdef __OMNI_COMPILE_SHADER_FOR_CXX
}
#endif // defined __OMNI_COMPILE_SHADER_FOR_CXX

#ifdef __OMNI_COMPILE_SHADER_FOR_GLSL

vec3 RotateByQuat(vec3 vertex, vec4 quat) {
	vec3 uv = cross(quat.xyz, vertex);
	vec3 uuv = cross(quat.xyz, uv);
	return vertex + ((uv * quat.w) + uuv) * 2.0;
};

f16vec3 RotateByQuat(f16vec3 vertex, f16vec4 quat) {
	f16vec3 uv = cross(quat.xyz, vertex);
	f16vec3 uuv = cross(quat.xyz, uv);
	return vertex + ((uv * quat.w) + uuv) * 2.0hf;
};

vec3 TransformPoint(vec3 point, Transform transform) {
	return RotateByQuat(point * transform.scale, vec4(transform.rotation)) + transform.translation;
}

#endif // defined __OMNI_COMPILE_SHADER_FOR_GLSL
#endif // !defined TRANSFORM_GLSLH