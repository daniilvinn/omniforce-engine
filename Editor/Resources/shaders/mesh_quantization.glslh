#ifndef MESH_QUANTIZATION_GLSLH
#define MESH_QUANTIZATION_GLSLH

#extension GL_EXT_explicit_arithmetic_types_float16

f16vec3 DecodeNormal(f16vec2 f)
{
	f = f * 2.0f - 1.0f;

	// https://twitter.com/Stubbesaurus/status/937994790553227264
	f16vec3 n = f16vec2vec3(f.x, f.y, 1.0 - abs(f.x) - abs(f.y));
	float16_t t = max(-n.z, 0.0f);
	n.x += n.x >= 0.0f ? -t : t;
	n.y += n.y >= 0.0f ? -t : t;

	return normalize(n);
}

f16vec4 DecodeTangent(f16vec2 f)
{
	f16vec4 t;
	t.xyz = DecodeNormal(f);
	
	// Check if lowest bit of Y's mantissa is set. If so, bitangent sign is positive, otherwise negative.
	t.w	= bool(float16BitsToUint16(f.y) & 1) ? 1 : -1;

	return t;
}

float DecodeVertexChannel(uint v, uint bitrate, float aabb_min) {
	// To decode quantized value, we need to convert it to float, divide by `1 << bitrate` 
	// and subtract by min value of a dimension we're decoding to restore sign.
	// But instead of division by POT value, we divide bitrate (not `1 << bitrate`) from float's exponent using `ldexp()` built-in, which is equal to
	// division of a float by power-of-two value.

	return ldexp(float(v), -bitrate)) - abs(aabb_min);
}

#endif