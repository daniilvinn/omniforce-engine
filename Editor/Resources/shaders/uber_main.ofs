#pragma lang : glsl
#pragma stage : task
#version 460 core

#extension GL_EXT_scalar_block_layout  : require
#extension GL_EXT_buffer_reference2    : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_mesh_shader          : require

#include "common.glslh" // common
#include "mesh_data.glslh" // mesh data
#include "render_object.glslh" // common render object data
#include "task_payload.glslh"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(push_constant, scalar) uniform pc_ {
    CameraData camera_data;
    MeshData mesh_data;
    RenderObjectData render_objects_data;
} pc;

shared uint s_actual_num_meshlets;

void main()
{
	uint lid = gl_LocalInvocationIndex; // lid = lane id
	
	RenderObjectData render_object_data = pc.render_objects_data[gl_DrawID];
	MeshData mesh_data = pc.mesh_data[render_object_data.geometry_data_id];

	if(gl_GlobalInvocationID.x >= mesh_data.meshlet_count) { // check if we are out of bounds
		return;
	}

	if(lid == 0) { // init shared memory in first lane
		s_actual_num_meshlets = 0;
	}

	MeshletCullBounds cull_bounds = mesh_data.meshlets_cull_bounds[gl_GlobalInvocationID.x];

	// Cull
	if(dot(normalize(cull_bounds.cone_apex - pc.camera_data.position), cull_bounds.cone_axis) < cull_bounds.cone_cutoff) {
		uint id_index = atomicAdd(s_actual_num_meshlets, 1);
		task_payload.meshlet_ids[id_index] = gl_GlobalInvocationID.x;
	}

	// Emit mesh work groups
	if(lid == 0) {
		EmitMeshTasksEXT(s_actual_num_meshlets, 1, 1);
	}
}

#pragma stage : mesh
#version 460 core
#extension GL_EXT_mesh_shader : require
#extension GL_EXT_debug_printf : require

#include "common.glslh"
#include "render_object.glslh"
#include "mesh_data.glslh"

layout(push_constant, scalar) uniform pc_ {
    CameraData camera_data;
    MeshData mesh_data;
    RenderObjectData render_objects_data;
} pc;

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 124) out;

layout(location = 0) out VertexOutput {
#ifdef __OMNI_HAS_VERTEX_NORMAL
    vec3 normal;
#endif
#ifdef __OMNI_HAS_VERTEX_TEXCOORD_0
    vec2 uv;
#endif
#ifdef __OMNI_HAS_VERTEX_TANGENT
    vec4 tangent;
#endif
} vertex_output[];

#include "task_payload.glslh"

void main()
{
	Transform transform = pc.render_objects_data[gl_DrawID].transform;
	vec4 rotation_quaternion = vec4(unpackSnorm2x16(transform.packed_rotation[0]), unpackSnorm2x16(transform.packed_rotation[1]));
	MeshData mesh_data = pc.mesh_data[gl_DrawID];
	MeshMeshletsData meshlet_data = mesh_data.meshlets_data[task_payload.meshlet_ids[gl_WorkGroupID.x]];

	// vertices
	uint vertex_processing_iterations = 64 / gl_WorkGroupSize.x;
	for(int i = 0; i < vertex_processing_iterations; i++) {
		vec3 vertex = mesh_data.vertices[meshlet_data.vertex_offset + (gl_WorkGroupSize.x * i + gl_LocalInvocationIndex)].vertex_position;
        vertex = RotateByQuat(vertex * transform.scale, rotation_quaternion) + transform.translation;
		gl_MeshVerticesEXT[gl_WorkGroupSize.x * i + gl_LocalInvocationIndex].gl_Position = pc.camera_data.view_proj * vec4(vertex, 1.0f);
	}

	uint index_processing_iterations = uint(round(float(meshlet_data.triangle_count) / float(gl_WorkGroupSize.x) + 0.49999f));
	for(int i = 0; i < index_processing_iterations; i++) {
		if(gl_WorkGroupSize.x * i + gl_LocalInvocationIndex >= meshlet_data.triangle_count) {
			break;
		}

		gl_PrimitiveTriangleIndicesEXT[gl_WorkGroupSize.x * i + gl_LocalInvocationIndex] = uvec3(
			mesh_data.micro_indices[meshlet_data.triangle_offset + ((gl_WorkGroupSize.x * i + gl_LocalInvocationIndex) * 3)].micro_index,
			mesh_data.micro_indices[meshlet_data.triangle_offset + ((gl_WorkGroupSize.x * i + gl_LocalInvocationIndex) * 3 + 1)].micro_index,
			mesh_data.micro_indices[meshlet_data.triangle_offset + ((gl_WorkGroupSize.x * i + gl_LocalInvocationIndex) * 3 + 2)].micro_index
		);
	}

	// attributes
	uint attribute_processing_iterations = 64 / gl_WorkGroupSize.x;
	for(int i = 0; i < attribute_processing_iterations; i++) {
	#ifdef __OMNI_HAS_VERTEX_NORMAL
		vertex_output[gl_WorkGroupSize.x * i + gl_LocalInvocationIndex].normal = mesh_data.attributes[meshlet_data.vertex_offset + (gl_WorkGroupSize.x * i + gl_LocalInvocationIndex)].normal;
	#endif
	#ifdef __OMNI_HAS_VERTEX_TEXCOORD_0
		vertex_output[gl_WorkGroupSize.x * i + gl_LocalInvocationIndex].uv = mesh_data.attributes[meshlet_data.vertex_offset + (gl_WorkGroupSize.x * i + gl_LocalInvocationIndex)].uv;
	#endif
	#ifdef __OMNI_HAS_VERTEX_TANGENT
		vertex_output[gl_WorkGroupSize.x * i + gl_LocalInvocationIndex].tangent = mesh_data.attributes[meshlet_data.vertex_offset + (gl_WorkGroupSize.x * i + gl_LocalInvocationIndex)].tangent;
	#endif
	}

    if(gl_LocalInvocationIndex == 0) {
        SetMeshOutputsEXT(64, meshlet_data.triangle_count);
    }
}

#pragma stage : fragment
#version 460 core
#extension GL_EXT_nonuniform_qualifier : require

#include "common.glslh"
#include "mesh_data.glslh"
#include "render_object.glslh"

layout(location = 0) out vec4 out_color;

layout(push_constant, scalar) uniform pc_ {
    CameraData camera_data;
    MeshData mesh_data;
    RenderObjectData render_objects_data;
} pc;

layout(location = 0) in Input {
#ifdef __OMNI_HAS_VERTEX_NORMAL
    vec3 normal;
#endif
#ifdef __OMNI_HAS_VERTEX_TEXCOORD_0
    vec2 uv;
#endif
#ifdef __OMNI_HAS_VERTEX_TANGENT
    vec4 tangent;
#endif
} v_Input;

layout(buffer_reference, scalar, buffer_reference_align = 16) readonly buffer Material {
	#ifdef __OMNI_HAS_ALPHA_CUTOFF
        float alpha_cutoff;
    #endif
    #ifdef __OMNI_HAS_BASE_COLOR_FACTOR
        vec4 base_color_factor;
    #endif
    #ifdef __OMNI_HAS_BASE_COLOR_MAP
        uint base_color_map_index;
    #endif
    #ifdef __OMNI_HAS_METALLIC_FACTOR
        float metallic_factor;
    #endif
    #ifdef __OMNI_HAS_METALLIC_ROUGHNESS_MAP
        uint metallic_roughness_map_index;
    #endif
    #ifdef __OMNI_HAS_NORMAL_MAP
        uint normal_map_index;
    #endif
    #ifdef __OMNI_HAS_OCCLUSION_MAP
        uint occlusion_map_index;
    #endif
    #ifdef __OMNI_HAS_ROUGHNESS_FACTOR
        float roughness_factor;
    #endif
};

void main() {
	Material material = Material(pc.render_objects_data.material_bda);
    out_color = texture(texture_bank[material.base_color_map_index], v_Input.uv);
}