#pragma lang : glsl
#pragma stage : task
#version 460 core

#extension GL_EXT_scalar_block_layout	: require
#extension GL_EXT_buffer_reference2		: require
#extension GL_EXT_nonuniform_qualifier	: require
#extension GL_EXT_mesh_shader			: require

#include "common.glslh" // common
#include "mesh_data.glslh" // mesh data
#include "render_object.glslh" // common render object data
#include "task_payload.glslh"
#include "frustum.glslh"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

shared uint s_actual_num_meshlets;

layout(push_constant, scalar) uniform pc_ {
    CameraData camera_data;
    MeshData mesh_data;
    RenderObjectData render_objects_data;
} pc;

void main()
{
	uint lid = gl_LocalInvocationIndex; // lid = lane id
	
	RenderObjectData render_object_data = pc.render_objects_data[gl_DrawID];

	Transform transform = render_object_data.transform;
	MeshData root_mesh_data = pc.mesh_data[render_object_data.geometry_data_id];
	MeshLOD mesh_data = root_mesh_data.lods[render_object_data.lod];

	if(gl_GlobalInvocationID.x >= mesh_data.meshlet_count) { // check if we are out of bounds
		return;
	}

	if(lid == 0) { // init shared memory in first lane
		s_actual_num_meshlets = 0;
	}

	MeshletCullBounds cull_bounds = mesh_data.meshlets_cull_bounds[gl_GlobalInvocationID.x];

	vec4 rotation_quaternion = vec4(unpackSnorm2x16(transform.packed_rotation[0]), unpackSnorm2x16(transform.packed_rotation[1]));

	vec3 cone_apex = RotateByQuat(cull_bounds.cone_apex * transform.scale, rotation_quaternion) + transform.translation;
	vec3 cone_axis = RotateByQuat(cull_bounds.cone_axis, rotation_quaternion); 

	Sphere bounding_sphere = cull_bounds.bounding_sphere;
	bounding_sphere.center = RotateByQuat(bounding_sphere.center * transform.scale, rotation_quaternion) + transform.translation;
    bounding_sphere.radius = bounding_sphere.radius * max(max(transform.scale.x, transform.scale.y), transform.scale.z);

	// Cull
	if((dot(normalize(cone_apex - pc.camera_data.position), cone_axis) < cull_bounds.cone_cutoff) && FrustumTestBoundingSphere(pc.camera_data.frustum, bounding_sphere)) {
		uint id_index = atomicAdd(s_actual_num_meshlets, 1);
		task_payload.meshlet_ids[id_index] = uint8_t(gl_GlobalInvocationID.x & 0x1F);
	}

	// Emit mesh work groups
	if(lid == 0 && s_actual_num_meshlets != 0) {
		task_payload.base_offset = gl_GlobalInvocationID.x;
		EmitMeshTasksEXT(s_actual_num_meshlets, 1, 1);
	}
}

#pragma stage : mesh
#version 460 core
#extension GL_EXT_mesh_shader									: require
#extension GL_EXT_debug_printf									: require
#extension GL_EXT_shader_explicit_arithmetic_types_float16		: require

#include "common.glslh"
#include "render_object.glslh"
#include "mesh_data.glslh"
#include "mesh_quantization.glslh"
#include "sphere.glslh"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 124) out;

layout(location = 0) out uint64_t out_material_bda[];

layout(push_constant, scalar) uniform pc_ {
    CameraData camera_data;
    MeshData mesh_data;
    RenderObjectData render_objects_data;
} pc;

layout(location = 1) out VertexOutput {
	vec3 position;
#ifdef __OMNI_HAS_VERTEX_TEXCOORDS
    vec2 uv[__OMNI_MESH_TEXCOORD_COUNT];
#endif
#ifdef __OMNI_HAS_VERTEX_NORMAL
	vec3 normal;
#endif
#ifdef __OMNI_HAS_NORMAL_MAP
	vec4 tangent;
#endif
} vertex_output[];

#include "task_payload.glslh"

void main()
{
	RenderObjectData render_object_data = pc.render_objects_data[gl_DrawID];

	MeshData root_mesh_data = pc.mesh_data[render_object_data.geometry_data_id];
	MeshLOD mesh_data = root_mesh_data.lods[render_object_data.lod];

	Transform transform = render_object_data.transform;
	vec4 rotation_quaternion = vec4(unpackSnorm2x16(transform.packed_rotation[0]), unpackSnorm2x16(transform.packed_rotation[1]));

	MeshMeshletsData meshlet_data = mesh_data.meshlets_data[task_payload.base_offset + task_payload.meshlet_ids[gl_WorkGroupID.x]];
	vec3 meshlet_center = mesh_data.meshlets_cull_bounds[task_payload.base_offset + task_payload.meshlet_ids[gl_WorkGroupID.x]].bounding_sphere.center;

	// Optimization with early memory allocation to hide allocation latency
	if(gl_LocalInvocationIndex == 0) {
        SetMeshOutputsEXT(meshlet_data.vertex_count, meshlet_data.triangle_count);
    };

	// vertices
	uint vertex_processing_iterations = (meshlet_data.vertex_count + gl_WorkGroupSize.x - 1) / gl_WorkGroupSize.x;
	int bit_extend_bitmask = 1 << (meshlet_data.bitrate - 1);

	for(int i = 0; i < vertex_processing_iterations; i++) {
		if((gl_LocalInvocationIndex * vertex_processing_iterations + i) >= meshlet_data.vertex_count) {
			break;
		}

		// Read from bit stream and extend sign bit
		ivec3 encoded_vertex = ivec3(
			// Read X
			(BitStreamRead(mesh_data.vertices, meshlet_data.bitrate, meshlet_data.vertex_bit_offset + 
				(gl_LocalInvocationIndex * meshlet_data.bitrate * 3 * vertex_processing_iterations + (i * 3 * meshlet_data.bitrate))) ^ bit_extend_bitmask) - bit_extend_bitmask,
			// Read Y
			(BitStreamRead(mesh_data.vertices, meshlet_data.bitrate, meshlet_data.vertex_bit_offset + 
				(gl_LocalInvocationIndex * meshlet_data.bitrate * 3 * vertex_processing_iterations + (i * 3 * meshlet_data.bitrate)) + meshlet_data.bitrate) ^ bit_extend_bitmask) - bit_extend_bitmask,
			// Read Z
			(BitStreamRead(mesh_data.vertices, meshlet_data.bitrate, meshlet_data.vertex_bit_offset + 
				(gl_LocalInvocationIndex * meshlet_data.bitrate * 3 * vertex_processing_iterations + (i * 3 * meshlet_data.bitrate)) + meshlet_data.bitrate * 2) ^ bit_extend_bitmask) - bit_extend_bitmask
		);

		// Decode vertex
		vec3 vertex = DecodeVertex(
			encoded_vertex,
			mesh_data.quantization_grid_size, 
			meshlet_center
		);

		vertex = RotateByQuat(vertex * transform.scale, rotation_quaternion) + transform.translation;

		gl_MeshVerticesEXT[gl_LocalInvocationIndex * vertex_processing_iterations + i].gl_Position = pc.camera_data.view_proj * vec4(vertex, 1.0f);
	}

	uint index_processing_iterations = (meshlet_data.triangle_count + gl_WorkGroupSize.x - 1) / gl_WorkGroupSize.x;
	for(int i = 0; i < index_processing_iterations; i++) {
		if(gl_LocalInvocationIndex * index_processing_iterations + i >= meshlet_data.triangle_count) {
			break;
		}

		gl_PrimitiveTriangleIndicesEXT[gl_LocalInvocationIndex * index_processing_iterations + i] = uvec3(
			mesh_data.micro_indices[meshlet_data.triangle_offset + ((gl_LocalInvocationIndex * index_processing_iterations + i) * 3)].micro_index,
			mesh_data.micro_indices[meshlet_data.triangle_offset + ((gl_LocalInvocationIndex * index_processing_iterations + i) * 3 + 1)].micro_index,
			mesh_data.micro_indices[meshlet_data.triangle_offset + ((gl_LocalInvocationIndex * index_processing_iterations + i) * 3 + 2)].micro_index
		);
	}

	// attributes and material bda
	uint num_processing_attributes = 64 / gl_WorkGroupSize.x;
	for(int i = 0; i < num_processing_attributes; i++) {
		if((gl_LocalInvocationIndex * vertex_processing_iterations + i) >= meshlet_data.vertex_count) {
			break;
		}

		out_material_bda[gl_LocalInvocationIndex * num_processing_attributes + i] = render_object_data.material_bda;
	
		#ifdef __OMNI_HAS_VERTEX_TEXCOORDS
			for(int j = 0; j < __OMNI_MESH_TEXCOORD_COUNT; j++) {
				vertex_output[gl_LocalInvocationIndex * num_processing_attributes + i].uv[j] = vec2(mesh_data.attributes[meshlet_data.vertex_offset + (gl_LocalInvocationIndex * num_processing_attributes + i)].uv[j]);
			}
		#endif

		// Process normals, tangents and bitangents
		#ifdef __OMNI_HAS_VERTEX_NORMAL
			f16vec3 normal = normalize(
				RotateByQuat(
					DecodeNormal(mesh_data.attributes[meshlet_data.vertex_offset + (gl_LocalInvocationIndex * num_processing_attributes + i)].normal), 
					f16vec4(rotation_quaternion)
				)
			);
			vertex_output[gl_LocalInvocationIndex * num_processing_attributes + i].normal = vec3(normal);
		#endif
		#if defined(__OMNI_HAS_NORMAL_MAP) && defined(__OMNI_HAS_VERTEX_NORMAL) && defined(__OMNI_HAS_VERTEX_TANGENT)
			f16vec4 tangent = DecodeTangent(mesh_data.attributes[meshlet_data.vertex_offset + (gl_LocalInvocationIndex * num_processing_attributes + i)].tangent);
			tangent.xyz = normalize(tangent.xyz - dot(tangent.xyz, normal) * normal); // reorthogonalize

			vertex_output[gl_LocalInvocationIndex * num_processing_attributes + i].tangent = vec4(tangent);
		#endif
	}
}

#pragma stage : fragment
#version 460 core
#extension GL_EXT_nonuniform_qualifier							: require
#extension GL_EXT_shader_explicit_arithmetic_types_float16		: require
#extension GL_EXT_debug_printf									: require

#include "common.glslh"
#include "mesh_data.glslh"
#include "render_object.glslh"
#include "texture.glslh"

layout(push_constant, scalar) uniform pc_ {
    CameraData camera_data;
    MeshData mesh_data;
    RenderObjectData render_objects_data;
} pc;

layout(location = 0) flat in uint64_t v_MaterialBDA;

layout(location = 1) in Input {
	vec3 position;
#ifdef __OMNI_HAS_VERTEX_TEXCOORDS
    vec2 uv[__OMNI_MESH_TEXCOORD_COUNT];
#endif
#ifdef __OMNI_HAS_VERTEX_NORMAL
	vec3 normal;
#endif
#ifdef __OMNI_HAS_NORMAL_MAP
	vec4 tangent;
#endif
} v_InputAttributes;


layout(buffer_reference, scalar, buffer_reference_align = 16) readonly buffer Material {
	#ifdef __OMNI_HAS_ALPHA_CUTOFF
        float alpha_cutoff;
    #endif
    #ifdef __OMNI_HAS_BASE_COLOR_FACTOR
        vec4 base_color_factor;
    #endif
    #ifdef __OMNI_HAS_BASE_COLOR_MAP
        Texture base_color_map;
    #endif
    #ifdef __OMNI_HAS_METALLIC_FACTOR
        float metallic_factor;
    #endif
    #ifdef __OMNI_HAS_METALLIC_ROUGHNESS_MAP
        Texture metallic_roughness_map;
    #endif
    #ifdef __OMNI_HAS_NORMAL_MAP
        Texture normal_map;
    #endif
    #ifdef __OMNI_HAS_OCCLUSION_MAP
        Texture occlusion_map;
    #endif
    #ifdef __OMNI_HAS_ROUGHNESS_FACTOR
        float roughness_factor;
    #endif
};

layout(location = 0) out vec4 out_position;
layout(location = 1) out vec4 out_color;
layout(location = 2) out vec4 out_normal;
layout(location = 3) out vec4 out_metallic_roughness_occlusion;

#ifdef __OMNI_HAS_NORMAL_MAP
	f16vec3 FetchNormal(Texture normal_map) {
	#ifndef __OMNI_HAS_VERTEX_TEXCOORDS
		return f16vec3(0.0f, 0.0f, 1.0f);
	#else
		f16vec3 normal = f16vec3(texture(texture_bank[normal_map.texture_index], vec2(v_InputAttributes.uv[normal_map.uv_channel_index].x, 1.0 - v_InputAttributes.uv[normal_map.uv_channel_index].y)).rgb);
		return normal * 2.0hf - 1.0hf;
	#endif
	}
#endif

void main() {
	Material material = Material(v_MaterialBDA);

	// Positions
	out_position = vec4(v_InputAttributes.position, 1.0f);

	// Base color
	vec4 color = vec4(1.0f, 0.0f, 1.0f, 1.0f);
	#ifdef __OMNI_HAS_BASE_COLOR_MAP
		color = texture(
			texture_bank[material.base_color_map.texture_index], 
			vec2(v_InputAttributes.uv[material.base_color_map.uv_channel_index].x, 
			1.0f - v_InputAttributes.uv[material.base_color_map.uv_channel_index].y)
		);
		#ifdef __OMNI_HAS_ALPHA_CUTOFF // alpha masking
			if(color.a <= material.alpha_cutoff) discard;
		#endif
	#endif
    out_color = color;

	// Normal
	#if defined(__OMNI_HAS_NORMAL_MAP) && defined(__OMNI_HAS_VERTEX_NORMAL) && defined(__OMNI_HAS_VERTEX_TANGENT)
		f16vec4 T = f16vec4(v_InputAttributes.tangent);
		f16vec3 N = f16vec3(v_InputAttributes.normal);
		f16vec3 B = cross(N, T.xyz) * T.w;

		N = normalize(f16mat3(T.xyz,B,N) * FetchNormal(material.normal_map));
		out_normal = vec4(vec3(N), 1.0f);
	#else 
		out_normal = vec4(v_InputAttributes.normal, 1.0f);
	#endif

	// Metallic roughness occlusion
	vec3 metallic_roughness_occlusion = vec3(0.0f, 0.0f, 1.0f);
	#ifdef __OMNI_HAS_METALLIC_ROUGHNESS_MAP
		metallic_roughness_occlusion = texture(
		texture_bank[material.metallic_roughness_map.texture_index], 
		vec2(v_InputAttributes.uv[material.metallic_roughness_map.uv_channel_index].x, 
		1.0f - v_InputAttributes.uv[material.metallic_roughness_map.uv_channel_index].y)
	).xyz;
	#endif
	out_metallic_roughness_occlusion = vec4(metallic_roughness_occlusion, 1.0f);

}