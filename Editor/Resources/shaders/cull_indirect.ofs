#pragma lang : glsl
#pragma stage : compute
#version 460 core

#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_scalar_block_layout : require

#include "camera_data.glslh"
#include "render_object.glslh"
#include "mesh_data.glslh"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(buffer_reference, scalar, buffer_reference_align = 1) buffer CulledObjectsCounter {
    uint count;
};

layout(buffer_reference, scalar, buffer_reference_align = 1) buffer IndirectDrawParameters {
    uvec3 draw_param;
};

layout(push_constant, scalar) uniform PushContants {
    CameraData camera_data;
    MeshData mesh_data;
    RenderObjectData render_objects_queue;
    uint original_object_count;
    RenderObjectData culled_objects;
    CulledObjectsCounter object_counter;
    IndirectDrawParameters indirect_draw_params;
} pc;

void main() {
    // Reset counter
    if(gl_GlobalInvocationID.x == 0) {
        pc.object_counter.count = 0;
    }

    // Check if we are out of queue bounds
    if(gl_GlobalInvocationID.x >= pc.original_object_count) {
        return;
    }

    // Cull
    RenderObjectData object = pc.render_objects_queue[gl_GlobalInvocationID.x];
    MeshData mesh_data = pc.mesh_data[object.geometry_data_id];

    Sphere bounding_sphere = mesh_data.bounding_sphere;
    bounding_sphere.center += object.transform.translation;

    if(FrustumTestBoundingSphere(pc.camera_data.frustum, bounding_sphere)) {
        uint index = atomicAdd(pc.object_counter.count, 1);

        pc.culled_objects[index].transform = object.transform;
        pc.culled_objects[index].geometry_data_id = object.geometry_data_id;
        pc.culled_objects[index].material_bda = object.material_bda;

        uint meshlet_count = uint(round((float(mesh_data.meshlet_count) / 32.0f) + 0.4999999f));
        pc.indirect_draw_params[index].draw_param = uvec3(meshlet_count, 1, 1);
    }
}