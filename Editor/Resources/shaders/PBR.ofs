#pragma lang : glsl
#pragma stage : vertex
#version 460 core

vec3 vertices[6] = {
	vec3( -1.0f,  -1.0f,  0.0f ),
	vec3(  1.0f,  -1.0f,  0.0f ),
	vec3(  1.0f,   1.0f,  0.0f ),
	vec3(  1.0f,   1.0f,  0.0f ),
	vec3( -1.0f,   1.0f,  0.0f ),
	vec3( -1.0f,  -1.0f,  0.0f )
};

vec2 tex_coords[6] = {
	vec2( 0.0f, 0.0f ),
	vec2( 1.0f, 0.0f ),
	vec2( 1.0f, 1.0f ),
	vec2( 1.0f, 1.0f ),
	vec2( 0.0f, 1.0f ),
	vec2( 0.0f, 0.0f )
};

layout(location = 0) out vec2 out_texcoord;

void main() {
	gl_Position = vec4(vertices[gl_VertexIndex], 1.0f);
	out_texcoord = tex_coords[gl_VertexIndex];
}

#pragma stage : fragment
#version 460 core

#extension GL_EXT_debug_printf : require

#include "common.glslh"
#include "PBRCommon.glslh"
#include "lights.glslh"

layout(push_constant, scalar) uniform PushConstants {
	CameraData camera_data;
	PointLight point_lights;
	uint positions_texture_index;
	uint base_color_texture_index;
	uint normal_texture_index;
	uint metallic_roughness_occlusion_texture_index;
	uint point_light_count;
} pc;

layout(location = 0) in vec2 v_UV;

layout(location = 0) out vec4 out_color;

void main() {
	vec3 world_position			= texture(texture_bank[pc.positions_texture_index],  vec2(v_UV.x, 1.0f - v_UV.y)).rgb;
	vec3 base_color				= texture(texture_bank[pc.base_color_texture_index], vec2(v_UV.x, 1.0f - v_UV.y)).rgb;
    vec3 metallic_roughness_ao  = texture(texture_bank[pc.metallic_roughness_occlusion_texture_index], vec2(v_UV.x, 1.0f - v_UV.y)).rgb;
	vec3 N						= texture(texture_bank[pc.normal_texture_index], vec2(v_UV.x, 1.0f - v_UV.y)).rgb;
    vec3 V                      = normalize(pc.camera_data.position - world_position);

	vec3 F0 = vec3(0.04f); 
    F0 = mix(F0, base_color, metallic_roughness_ao.b);

	vec3 Lo = vec3(0.0f);
	for(int i = 0; i < pc.point_light_count; i++) {
        PointLight point_light = pc.point_lights[i];

        vec3 L = normalize(point_light.position - world_position);
        vec3 H = normalize(V + L);
        float distance = length(point_light.position - world_position);

        float attenuation = ComputePointLightAttenuation(world_position, point_light);
        vec3 radiance = point_light.color * attenuation * point_light.intensity;

        // Cook-Torrance BRDF
        float NDF = DistributionGGX(N, H, metallic_roughness_ao.g);   
        float G   = GeometrySmith(N, V, L, metallic_roughness_ao.g);      
        vec3  F    = fresnelSchlick(max(dot(H, V), 0.0), F0);
           
        vec3 numerator    = NDF * G * F; 
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001; // + 0.0001 to prevent divide by zero
        vec3 specular = numerator / denominator;
        
        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - metallic_roughness_ao.b;	  

        float NdotL = max(dot(N, L), 0.0);        

        Lo += (kD * base_color / PI + specular) * radiance * NdotL;
	}

	vec3 ambient = vec3(0.001) * base_color;
	vec3 color   = ambient + Lo;

	out_color = vec4(color + Lo, 1.0f);

}