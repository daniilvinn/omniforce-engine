#ifndef VIRTUAL_GEOMETRY_UTILS_GLSLH
#define VIRTUAL_GEOMETRY_UTILS_GLSLH

#include "mesh_data.glslh"
#include "camera_data.glslh"
#include "sphere.glslh"
#include "render_object.glslh"

float ProjectMeshletError(Sphere sphere, CameraData camera_data, float half_fov_cot) {
    // Early out in case of infinite error
    if(isinf(sphere.radius))
        return sphere.radius;

    const float d2 = dot(sphere.center, sphere.center);
    const float r = sphere.radius;
    return camera_data.viewport_height / 2.0f * half_fov_cot * r / sqrt(d2 - r * r);
}

bool TestMeshletLOD(MeshletLODCullData lod_culling_data, CameraData camera_data, RenderObjectData render_object) {
    const float half_fov_cot = 1.0f / tan(camera_data.fov / 2.0f);
    const float viewport = camera_data.viewport_height;

    // Project current meshlet's sphere
    Sphere projected_bounding_sphere = Sphere(
        lod_culling_data.sphere.center,
        max(lod_culling_data.error, 0.000000001f)
    );

    projected_bounding_sphere = TransformSphere(projected_bounding_sphere, render_object.transform, camera_data.view);
    const float result_error = ProjectMeshletError(projected_bounding_sphere, camera_data, half_fov_cot);

    // Project parent sphere
    Sphere parent_projected_bounding_sphere = Sphere(
        lod_culling_data.parent_sphere.center,
        max(lod_culling_data.parent_error, 0.000000001f)
    );

    parent_projected_bounding_sphere = TransformSphere(parent_projected_bounding_sphere, render_object.transform, camera_data.view);
    const float parent_result_error = ProjectMeshletError(parent_projected_bounding_sphere, camera_data, half_fov_cot);

    // Perform a LOD test. If error (in pixels) of current meshlet is small enough AND parent error is too big, we render this group
    return result_error <= 1.0f && parent_result_error > 1.0f;
}

#endif