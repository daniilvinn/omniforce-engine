#pragma lang : glsl
#pragma stage : vertex
#version 460 core

#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_buffer_reference2 : require

#include "Transform.glslh"
#include "camera_data.glslh"

layout(location = 0) in vec3 position;

layout(push_constant, scalar) uniform PushConstants {
    CameraData camera;
    Transform transform;
    u8vec3 color;
} pc;

vec3 RotateByQuat(vec3 vertex, vec4 quat) {
	vec3 uv = cross(quat.xyz, vertex);
	vec3 uuv = cross(quat.xyz, uv);
	return vertex + ((uv * quat.w) + uuv) * 2.0;
};

void main() {
    vec4 rotation_quaternion = vec4(unpackSnorm2x16(pc.transform.packed_rotation[0]), unpackSnorm2x16(pc.transform.packed_rotation[1]));
    gl_Position = pc.camera.view_proj * vec4(RotateByQuat(position * pc.transform.scale, rotation_quaternion) + pc.transform.translation, 1.0f);
}

#pragma stage : fragment
#version 460 core

#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_buffer_reference2 : require

#include "Transform.glslh"
#include "camera_data.glslh"

layout(location = 0) out vec4 color;

layout(push_constant, scalar) uniform PushConstants {
    CameraData camera;
    Transform transform;
    u8vec3 color;
} pc;

void main() {
    color = vec4(pc.color.r / 255, pc.color.g / 255, pc.color.b / 255, 1.0f);
    gl_FragDepth = 1.0f;
}