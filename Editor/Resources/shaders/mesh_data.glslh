#ifndef MESH_DATA_GLSLH
#define MESH_DATA_GLSLH

#include "sphere.glslh"
#include "AABB.glslh"
#include "constants.glslh"
#include "bitstream.glslh"

#extension GL_EXT_shader_explicit_arithmetic_types_int8     : require
#extension GL_EXT_shader_explicit_arithmetic_types_int32    : require
#extension GL_EXT_shader_explicit_arithmetic_types_float16  : require
#extension GL_EXT_buffer_reference2                         : require
#extension GL_EXT_scalar_block_layout                       : require

layout(buffer_reference, scalar, buffer_reference_align = 4) readonly buffer MeshAttributesData {
    #if !defined(__OMNI_HAS_VERTEX_NORMAL) && !defined(__OMNI_HAS_VERTEX_TANGENT) && !defined(__OMNI_HAS_VERTEX_TEXCOORDS) // using a trick so it compiles for other non-3D passes
        float unused;
    #else
        #ifdef __OMNI_HAS_VERTEX_NORMAL
            f16vec2 normal;
        #endif
        #ifdef __OMNI_HAS_VERTEX_TANGENT
            f16vec2 tangent;
        #endif
        #ifdef __OMNI_HAS_VERTEX_TEXCOORDS
            f16vec2 uv[__OMNI_MESH_TEXCOORD_COUNT];
        #endif
    #endif
};

layout(buffer_reference, scalar, buffer_reference_align = 1) readonly buffer MeshMeshletsData {
    uint vertex_bit_offset;
	uint vertex_offset;
	uint triangle_offset;
	uint vertex_count;
	uint triangle_count;
	uint bitrate;
};

layout(buffer_reference, scalar, buffer_reference_align = 1) readonly buffer MeshMicroindices {
    uint8_t micro_index;
};

layout(buffer_reference, scalar, buffer_reference_align = 1) readonly buffer MeshletCullBounds {
    Sphere bounding_sphere;
    vec3 cone_apex;
    vec3 cone_axis;
    float cone_cutoff;
};

struct MeshLOD {
    Sphere bounding_sphere;
    uint meshlet_count;
    int quantization_grid_size;
    ReadOnlyBitStream vertices;
    MeshAttributesData attributes;
    MeshMeshletsData meshlets_data;
    MeshMicroindices micro_indices;
    MeshletCullBounds meshlets_cull_bounds;
};

layout(buffer_reference, scalar, buffer_reference_align = 4) readonly buffer MeshData {
    float lod_distance_multiplier;
    MeshLOD lods[OMNI_MAX_MESH_LOD_COUNT];
};

#endif