#pragma lang : glsl
#pragma stage : vertex
#version 460 core
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_buffer_reference2 : require

#include "common.glslh"

vec3 vertices[6] = {
	vec3( -1.0f,  -1.0f,  0.0f ),
	vec3(  1.0f,  -1.0f,  0.0f ),
	vec3(  1.0f,   1.0f,  0.0f ),
	vec3(  1.0f,   1.0f,  0.0f ),
	vec3( -1.0f,   1.0f,  0.0f ),
	vec3( -1.0f,  -1.0f,  0.0f )
};

vec2 tex_coords[6] = {
	vec2( 0.0f, 0.0f ),
	vec2( 1.0f, 0.0f ),
	vec2( 1.0f, 1.0f ),
	vec2( 1.0f, 1.0f ),
	vec2( 0.0f, 1.0f ),
	vec2( 0.0f, 0.0f )
};

layout(location = 0) out vec2 tex_coord;
layout(location = 1) out uint texture_index;
layout(location = 2) out vec4 color_tint;



void main() {
	Sprite sprite = sprite_data.sprites[gl_InstanceIndex];

	vec4 rotation_quaternion = vec4(unpackSnorm2x16(sprite.rotation[0]), unpackSnorm2x16(sprite.rotation[1]));

	vec3 rotated_vertex = RotateByQuat(vec3(sprite.size, 1.0f) * vertices[gl_VertexIndex], rotation_quaternion);
	gl_Position = pc.camera_data.view_proj * vec4(sprite.position + rotated_vertex, 1);

	tex_coord = tex_coords[gl_VertexIndex];
	texture_index = sprite.texture_index;
	color_tint = sprite.color_tint;
}



#pragma stage : fragment
#version 460 core

#extension GL_EXT_nonuniform_qualifier : require

layout(location = 0) in vec2 v_TexCoord;
layout(location = 1) flat in uint v_TextureIndex;
layout(location = 2) in vec4 v_ColorTint;

#include "common.glslh"

layout(location = 0) out vec4 final_color;

void main() {
	vec4 texel_color = texture(texture_bank[nonuniformEXT(5)], v_TexCoord);
	final_color = texel_color * v_ColorTint;
}