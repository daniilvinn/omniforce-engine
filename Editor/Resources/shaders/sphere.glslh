#ifndef SPHERE_GLSLH
#define SPHERE_GLSLH

#include "Transform.glslh"

struct Sphere {
	vec3 center;
	float radius;
};

Sphere TransformSphere(Sphere sphere, Transform transform, mat4 camera_transform) {
	Sphere result_sphere = sphere;
	
	// Scale the position and radius
	result_sphere.radius *= max(transform.scale.x, max(transform.scale.y, transform.scale.z));
	
	result_sphere.center = TransformPoint(result_sphere.center, transform);

	// Transform position into a view space
	vec4 view_space_position = camera_transform * vec4(result_sphere.center, 1.0);

	// Assign new position and compute view-space radius
	result_sphere.center = view_space_position.xyz;
	result_sphere.radius /= view_space_position.w;

	return result_sphere;
}

#endif