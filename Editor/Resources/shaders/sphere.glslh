#ifndef SPHERE_GLSLH
#define SPHERE_GLSLH

#include "Transform.glslh"

struct Sphere {
	vec3 center;
	float radius;
};

vec3 QuaternionRotate(vec3 vertex, vec4 quat) {
	vec3 uv = cross(quat.xyz, vertex);
	vec3 uuv = cross(quat.xyz, uv);
	return vertex + ((uv * quat.w) + uuv) * 2.0;
};

Sphere TransformSphere(Sphere sphere, Transform transform, mat4 camera_transform) {
	Sphere result_sphere = sphere;

	vec4 rotation_quaternion = vec4(unpackSnorm2x16(transform.packed_rotation[0]), unpackSnorm2x16(transform.packed_rotation[1]));

	result_sphere.center = (camera_transform * vec4(QuaternionRotate(sphere.center * transform.scale, rotation_quaternion) + transform.translation, 1.0f)).xyz;
	result_sphere.radius = length( 
		camera_transform * vec4(
			QuaternionRotate(
				vec3(sphere.radius, 0.0f, 0.0f) * transform.scale, rotation_quaternion
			) + transform.translation, 
			0.0f
		) 
	);

	return result_sphere;
}

#endif