#ifndef BITSTREAM_GLSLH
#define BITSTREAM_GLSLH

#extension GL_EXT_buffer_reference2 : require

layout(buffer_reference, scalar, buffer_reference_align = 4) buffer ReadOnlyBitStream {
	uint storage[];
};

uint BitStreamRead(ReadOnlyBitStream bitstream, uint num_bits, uint bit_offset) {
	uint value = 0;

	// Optimization by using right shift instead of division by 32.
	// Here I find uint cell index within a bit stream storage based on requested offset.
	// It works because shifting to the right is equal to the division by value which is a power of 2.
	uint index = bit_offset >> 5; // >> 5 instead of division by 32

	// Optimization by using bit masking instead of modulo op.
	// Here I find a bit offset within a single uint cell
	// It works because I needed do find a 32 modulo of `data`, and 32 is 2^5, 
	// so I can simply bitmask all other bits except of first 4. 
	// This way only first 4 bits are left, which is the value I needed
	uint local_offset = bit_offset & 0x1F;

	// Create a bitmask based on local offset and num of bits to read,
	// which will allow to read only necessary values from a cell
	uint bitmask = ((1 << num_bits) - 1) << local_offset;

	// Shift the read bits back to the beginning of a value
	value = (bitstream.storage[index] & bitmask) >> local_offset;

	// If value is not encoded entirely within a single cell, we need to do a second read from next cell
	if (local_offset + num_bits > 32u) {
		// Write new bitmask based on num of bits left to read
		bitmask = ((1 << (num_bits - (32u - local_offset))) - 1);

		// Read value using bitmask and shift it to the right, so values which were read by previous read are not overriden
		value |= (bitstream.storage[index + 1] & bitmask) << (32u - local_offset);
	}

	return value;
}

#endif